
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> d.long <- read.csv('/gpfs/projects/edquant/cengiz/mglnrt3/rt_long.csv')
> 
> d.long <- na.omit(d.long)
> 
> d.long$item <- as.numeric(substring(d.long$Item,6))
> 
> 
> icode = c(201,204,205,206,208,210,211,214,216,218,220,222,223,224,226,227,228,
+           229,230,231,232,234,236,237,239,241,242,243,244,247,248,249,253,255,
+           257,258,261,263,264,265,267,268,269,272,279,280,281,282,283,286,287,
+           288,292,296,297,298,302,303,305,307,308,314,316,318,322,323,327,329,
+           331,338,340,341,343,345,346,347,348,350,353,359,366,367,368)
> 
> icode2 = 171:253
> 
> 
> for(i in 1:83){
+   d.long[which(d.long$item == icode[i]),]$item = icode2[i]
+ }
> 
> unique(d.long$item)
  [1]   1  10 100 101 102 103 104 105 106 107 108 109  11 110 111 112 113 114
 [19] 115 116 117 118 119  12 120 121 122 123 124 125 126 127 128 129  13 130
 [37] 131 132 133 134 135 136 137 138 139  14 140 141 142 143 144 145 146 147
 [55] 148 149  15 150 151 152 153 154 155 156 157 158 159  16 160 161 162 163
 [73] 164 165 166 167 168 169  17 170  18  19   2  20  21  22  23  24  25  26
 [91]  27  28  29   3  30  31  32  33  34  35  36  37  38  39   4  40  41  42
[109]  43  44  45  46  47  48  49   5  50  51  52  53  54  55  56  57  58  59
[127]   6  60  61  62  63  64  65  66  67  68  69   7  70  71  72  73  74  75
[145]  76  77  78  79   8  80  81  82  83  84  85  86  87  88  89   9  90  91
[163]  92  93  94  95  96  97  98  99 171 172 173 174 175 176 177 178 179 180
[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198
[199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216
[217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234
[235] 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252
[253] 253
> 
> tab <- as.data.frame(table(d.long$Item,d.long$item))
> tab = tab[which(tab[,3]!=0),]
> 
> 
> 
> d.long$id <- NA
> 
> ind = which(substring(d.long$EID,1,3)=='e10')
> d.long[ind,]$id = as.numeric(substring(d.long[ind,]$EID,4,7))
> 
> ind = which(substring(d.long$EID,1,3)=='e20')
> d.long[ind,]$id = as.numeric(substring(d.long[ind,]$EID,4,7))+1636
> 
> tab <- as.data.frame(table(d.long$EID,d.long$id))
> tab = tab[which(tab[,3]!=0),]
> 
> ########################################################################
> 
> d.long1 <- d.long[which(d.long$p_flag==0),]
> d.long2 <- d.long[which(d.long$p_flag==1),]
> 
> 
> d.long1$id2 <- NA
> 
> icode = unique(d.long1$id)
> for(i in 1:3186){
+   d.long1[which(d.long1$id == icode[i]),]$id2 = i
+ }
> 
> tab <- as.data.frame(table(d.long1$id,d.long1$id2))
> tab = tab[which(tab[,3]!=0),]
> 
> 
> d.long2$id2 <- NA
> 
> icode = unique(d.long2$id)
> for(i in 1:94){
+   d.long2[which(d.long2$id == icode[i]),]$id2 = i
+ }
> 
> tab <- as.data.frame(table(d.long2$id,d.long2$id2))
> tab = tab[which(tab[,3]!=0),]
> 
> 
> id1            <- d.long1$id2
> item1          <- d.long1$item
> istatus1       <- ifelse(d.long1$i_flag=='Flagged',1,0)
> rt1            <- d.long1$RT
> n_obs1         <- length(rt1)
> 
> id2            <- d.long2$id2
> item2          <- d.long2$item
> istatus2       <- ifelse(d.long2$i_flag=='Flagged',1,0)
> rt2            <- d.long2$RT
> n_obs2         <- length(rt2)
> 
> ###########################################################################################################################
> 
> require(cmdstanr)
> 
> set_cmdstan_path('/gpfs/home/cengiz/.cmdstanr/cmdstan-2.24.1')
> 
> mod <- cmdstan_model('/gpfs/projects/edquant/cengiz/mglnrt3/mglnrt.stan')
> 
> data_rt<-list(J        = 253,
+               i1       = 3186,
+               n_obs1   = length(rt1),
+               item1    = item1,
+               id1      = id1,
+               istatus1 = istatus1,
+               Y1       = rt1,
+               i2       = 94,
+               n_obs2   = length(rt2),
+               item2    = item2,
+               id2      = id2,
+               istatus2 = istatus2,
+               Y2       = rt2,
+               mu_tau1  = c(0,0))
> 
> fit <- mod$sample(
+   data = data_rt,
+   seed = 123,
+   chains = 4,
+   parallel_chains = 4,
+   iter_warmup   = 500,
+   iter_sampling = 1500,
+   refresh = 100
+ )
Running MCMC with 4 parallel chains...

Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 4 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 3 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 1 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 2 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 4 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 3 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 1 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 2 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 4 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 3 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 1 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 2 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 4 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 3 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 1 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 2 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 3 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 4 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 1 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 2 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 finished in 14111.7 seconds.
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 2 finished in 14181.5 seconds.
Chain 1 finished in 14186.0 seconds.
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 finished in 14198.7 seconds.

All 4 chains finished successfully.
Mean chain execution time: 14169.5 seconds.
Total execution time: 14198.9 seconds.
> 
> 
> fit$save_output_files('/gpfs/projects/edquant/cengiz/mglnrt3')
> 
> stanfit <- rstan::read_stan_csv(fit$output_files())
> 
> save.image("/gpfs/projects/edquant/cengiz/mglnrt3/mglnrt.RData")
> 
> 
> 
